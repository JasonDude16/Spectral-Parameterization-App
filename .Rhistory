t <- readRDS("./data/no_alpha_fooof_settings.RDS")
t
no_alpha_fooof_settings <- readRDS("Z:/Staff/DATA Management/Version Control/NEMO_Purdue/Shiny_Apps/Spectral_Parameterization/no_alpha_fooof_settings.RDS")
no_alpha_fooof_settings <- readRDS("Z:/Staff/DATA Management/Version Control/NEMO_Purdue/Shiny_Apps/Spectral_Parameterization/no_alpha_fooof_settings.RDS")
t <- readRDS("./no_alpha_fooof_settings.RDS")
test <- list(fm$get_settings())
saveRDS(test, "no_alpha_fooof_settings.RDS")
t2 <- readRDS("./no_alpha_fooof_settings.RDS")
View(t2)
t2
saveRDS(c("FOOOFSettings(peak_width_limits=[2.5, 8.0], max_n_peaks=6.0, min_peak_height=0.1, peak_threshold=2.0, aperiodic_mode='fixed')"), "no_alpha_fooof_settings.RDS")
t2 <- readRDS("./no_alpha_fooof_settings.RDS")
t2
no_alpha_fooof_settings <- readRDS("./no_alpha_fooof_settings.RDS")
runApp()
no_alpha_fooof_settings
runApp()
shiny::runApp()
shiny::runApp()
devtools::install_github("hadley/requirements")
requirements::req_file()
requirements::req_file("test")
requirements::req_file("./test")
requirements::req_file("ui.R")
requirements::req_file(path = "./")
requirements::req_file(path = "server.R")
requirements::req_code(path = "server.R")
requirements::req_code()
requirements::req_file("ui.R")
requirements::req_file("server.R")
requirements::req_file("ui.R")
requirements::req_file("server.R")
setwd("~/Documents/projects/Spectral_Parameterization/R")
map(list.files, requirements::req_file)
purrr::map(list.files, requirements::req_file)
list.files
purrr::map(list.files(), requirements::req_file)
purrr::map(list.files(), requirements::req_file))
unique(list(
requirements::req_file("ui.R"),
requirements::req_file("server.R"),
purrr::map(list.files(), requirements::req_file)))
unique(list(
requirements::req_file("../ui.R"),
requirements::req_file("../server.R"),
purrr::map(list.files(), requirements::req_file)))
require("tidyr")
require("tea")
require("packrat")
setwd("~/Documents/projects/Spectral_Parameterization")
packrat::init()
reticulate::virtualenv_create("spec_param", packages = c("numpy", "fooof", "matplotlib", ""))
reticulate::virtualenv_list()
install.packages("renv")
library(renv)
use_python()
runApp()
shiny::runApp()
runApp()
runApp()
install.packages("crosstalk")
runApp()
install.packages("reticulate")
shiny::runApp()
install.packages("DT")
runApp()
install.packages("DT")
shiny::runApp()
runApp()
runApp()
runApp()
histogramUI <- function(id) {
tagList(
selectInput(NS(id, "var"), "Variable", choices = names(mtcars)),
numericInput(NS(id, "bins"), "bins", value = 10, min = 1),
plotOutput(NS(id, "hist"))
)
}
histogramServer <- function(id) {
moduleServer(id, function(input, output, session) {
data <- reactive(mtcars[[input$var]])
output$hist <- renderPlot({
hist(data(), breaks = input$bins, main = input$var)
}, res = 96)
})
}
histogramApp <- function() {
ui <- fluidPage(
histogramUI("hist1")
)
server <- function(input, output, session) {
histogramServer("hist1")
}
shinyApp(ui, server)
}
histogramApp()
histogramApp()
force(add_count_)
force(summarize_at)
View(slice_)
View(setdiff)
View(transmute)
View(transmute_at)
View(ungroup)
force(mutate_all)
renv::init()
renv::snapshot()
shiny::runApp()
install.packages("png")
runApp()
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$somevalue })
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output, session) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
ui <- fluidPage(
checkboxGroupInput("icons", "Choose icons:",
choiceNames =
list(icon("calendar"), icon("bed"),
icon("cog"), icon("bug")),
choiceValues =
list("calendar", "bed", "cog", "bug")
),
textOutput("txt")
)
server <- function(input, output, session) {
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("You chose", icons)
})
}
shinyApp(ui, server)
}
shiny::runApp()
install.packages("tidyr")
runApp()
runApp()
shiny::runApp()
install.packages(c("ggplot2", "dplyr"))
library()
.packages()
(.packages())
Sys.which()
Sys.which("python")
py_discover_config()
Sys.which("python")
py_discover_config()
conda_list()
install.packages("usethis")
usethis::edit_r_profile()
py_discover_config()
conda_list()
Sys.which("python")
file.edit(".Rprofile")
file.edit(".Rprofile")
usethis::edit_r_profile()
usethis::edit_r_profile()
(cl <- conda_list())
cl$name
cl$name == "r-reticulate"
cl[cl$name == "r-reticulate", ]
cl[cl$name == "r-reticulate", ]$python
usethis::edit_r_profile()
file.path(Sys.getenv("HOME"), ".Rprofile")
file.edit("/Users/JasonDude/.Rprofile")
file.edit("/Users/JasonDude/.Rprofile")
readLines("/Users/JasonDude/.Rprofile")
readLines("/Users/JasonDude/.Rprofile")
file.edit("/Users/JasonDude/.Rprofile")
readlines("/Users/JasonDude/.Rprofile")
readLines("/Users/JasonDude/.Rprofile")
writeLines(Sys.setenv(RETICULATE_PYTHON = "/Users/JasonDude/Library/r-miniconda/envs/r-reticulate/bin/python"),
"/Users/JasonDude/.Rprofile")
writeLines("Sys.setenv(RETICULATE_PYTHON = '/Users/JasonDude/Library/r-miniconda/envs/r-reticulate/bin/python')",
"/Users/JasonDude/.Rprofile")
usethis::edit_r_profile()
usethis::edit_r_profile()
cl[cl$name == "r-reticulate", ]$python
paste("Sys.setenv(RETICULATE_PYTHON = ",  cl[cl$name == "r-reticulate", ]$python
paste("Sys.setenv(RETICULATE_PYTHON = ", cl[cl$name == "r-reticulate", ]$python)
paste("Sys.setenv(RETICULATE_PYTHON = '", cl[cl$name == "r-reticulate", ]$python, "'")
paste0("Sys.setenv(RETICULATE_PYTHON = '", cl[cl$name == "r-reticulate", ]$python, "'")
cat("Sys.setenv(RETICULATE_PYTHON = '", cl[cl$name == "r-reticulate", ]$python, "'")
cat("Sys.setenv(RETICULATE_PYTHON = '",cl[cl$name == "r-reticulate", ]$python,"'")
file.path(Sys.getenv("HOME"), ".Rprofile")
usethis::edit_r_profile()
writeLines(text = cat("Sys.setenv(RETICULATE_PYTHON = '", cl[cl$name == "r-reticulate", ]$python, "'"),
con = "/Users/JasonDude/.Rprofile")
cat("Sys.setenv(RETICULATE_PYTHON = '", cl[cl$name == "r-reticulate", ]$python, "'")
cat("Sys.setenv(RETICULATE_PYTHON = '", cl[cl$name == "r-reticulate", ]$python, "')")
writeLines(text = cat("Sys.setenv(RETICULATE_PYTHON = '", cl[cl$name == "r-reticulate", ]$python, "')"),
con = "/Users/JasonDude/.Rprofile")
as.character(cat("Sys.setenv(RETICULATE_PYTHON = '", cl[cl$name == "r-reticulate", ]$python, "')"))
as.character(cat("Sys.setenv(RETICULATE_PYTHON = '", cl[cl$name == "r-reticulate", ]$python, "')"))
paste("Sys.setenv(RETICULATE_PYTHON = '", cl[cl$name == "r-reticulate", ]$python, "')"))
paste("Sys.setenv(RETICULATE_PYTHON = '", cl[cl$name == "r-reticulate", ]$python, "')")
as.character("Sys.setenv(RETICULATE_PYTHON = '", cl[cl$name == "r-reticulate", ]$python, "')")
paste("Sys.setenv(RETICULATE_PYTHON = '", cl[cl$name == "r-reticulate", ]$python, "')")
writeLines(text = paste("Sys.setenv(RETICULATE_PYTHON = '", cl[cl$name == "r-reticulate", ]$python, "')"),
con = "/Users/JasonDude/.Rprofile")
usethis::edit_r_profile()
file.path(Sys.getenv("HOME"), ".Rprofile")
renv::restore()
.libPaths()
find.package("dplyr")
shiny::runApp()
runApp()
runApp()
runApp()
library(reticulate)
fooof <- import("fooof")
fooof$FOOOF()
np <- import("numpy")
np <- import("numpy")
fooof <- import("fooof")
np <- import("numpy")
reticulate::conda_list()
Sys.getenv("HOME")
runApp()
shiny::runApp()
paste0("Sys.setenv(RETICULATE_PYTHON = '", retic, "')")
(cl <- reticulate::conda_list())
retic <- cl[cl$name == "r-reticulate", ]$python
paste0("Sys.setenv(RETICULATE_PYTHON = '", retic, "')")
retic
shiny::runApp()
install.packages("plotly")
runApp()
set.seed(357)
xy <- data.frame(letters = rep(c("a", "b", "c"), times = 3),
values = runif(9),
groups = rep(c("group1", "group2", "group3"), each = 3))
#create a SharedData object for use in the ggplot below, group by 'groups'
d <- highlight_key(xy, ~groups )
#create a normal ggplot to fit your needs, but use the SharedData object as data for the chart
p <- ggplot( d, aes(x = letters, y = values, group = groups)) + theme_bw() + geom_point()
#now ggplotly the newly created ggplot, and add text for the tooltips as needed
gg <- ggplotly( p, tooltip = "groups" )
#set the highlight-options to your liking, and plot...
highlight( gg, on = "plotly_hover", off = "plotly_deselect", color = "red" )
library(plotly)
set.seed(357)
xy <- data.frame(letters = rep(c("a", "b", "c"), times = 3),
values = runif(9),
groups = rep(c("group1", "group2", "group3"), each = 3))
#create a SharedData object for use in the ggplot below, group by 'groups'
d <- highlight_key(xy, ~groups )
#create a normal ggplot to fit your needs, but use the SharedData object as data for the chart
p <- ggplot( d, aes(x = letters, y = values, group = groups)) + theme_bw() + geom_point()
#now ggplotly the newly created ggplot, and add text for the tooltips as needed
gg <- ggplotly( p, tooltip = "groups" )
#set the highlight-options to your liking, and plot...
highlight( gg, on = "plotly_hover", off = "plotly_deselect", color = "red" )
mtcars
#create a normal ggplot to fit your needs, but use the SharedData object as data for the chart
p <- ggplot(mtcars, aes(x = mpg, y = hp, group = cyl)) + theme_bw() + geom_line()
p
#create a normal ggplot to fit your needs, but use the SharedData object as data for the chart
p <- ggplot(mtcars, aes(x = mpg, y = hp, col = cyl)) + theme_bw() + geom_line()
p
#create a normal ggplot to fit your needs, but use the SharedData object as data for the chart
ggplot(mtcars, aes(x = mpg, y = hp, col = as.factor(cyl))) + theme_bw() + geom_line()
#create a normal ggplot to fit your needs, but use the SharedData object as data for the chart
p <- ggplot(mtcars, aes(x = mpg, y = hp, col = as.factor(cyl))) + theme_bw() + geom_line()
#now ggplotly the newly created ggplot, and add text for the tooltips as needed
gg <- ggplotly( p, tooltip = "groups" )
#set the highlight-options to your liking, and plot...
highlight( gg, on = "plotly_hover", off = "plotly_deselect", color = "red" )
#create a SharedData object for use in the ggplot below, group by 'groups'
d <- highlight_key(xy, ~cyl )
#create a normal ggplot to fit your needs, but use the SharedData object as data for the chart
p <- ggplot(mtcars, aes(x = mpg, y = hp, col = as.factor(cyl))) + theme_bw() + geom_line()
#now ggplotly the newly created ggplot, and add text for the tooltips as needed
gg <- ggplotly( p, tooltip = "groups" )
#set the highlight-options to your liking, and plot...
highlight( gg, on = "plotly_hover", off = "plotly_deselect", color = "red" )
#create a SharedData object for use in the ggplot below, group by 'groups'
d <- highlight_key(mtcars, ~cyl )
#create a normal ggplot to fit your needs, but use the SharedData object as data for the chart
p <- ggplot(mtcars, aes(x = mpg, y = hp, col = as.factor(cyl))) + theme_bw() + geom_line()
#now ggplotly the newly created ggplot, and add text for the tooltips as needed
gg <- ggplotly( p, tooltip = "groups" )
#set the highlight-options to your liking, and plot...
highlight( gg, on = "plotly_hover", off = "plotly_deselect", color = "red" )
#now ggplotly the newly created ggplot, and add text for the tooltips as needed
gg <- ggplotly( p, tooltip = "cyl" )
#set the highlight-options to your liking, and plot...
highlight( gg, on = "plotly_hover", off = "plotly_deselect", color = "red" )
#create a SharedData object for use in the ggplot below, group by 'groups'
d <- highlight_key(mtcars, ~as.factor(cyl) )
#create a normal ggplot to fit your needs, but use the SharedData object as data for the chart
p <- ggplot(mtcars, aes(x = mpg, y = hp, col = as.factor(cyl))) + theme_bw() + geom_line()
#now ggplotly the newly created ggplot, and add text for the tooltips as needed
gg <- ggplotly( p, tooltip = "cyl" )
#set the highlight-options to your liking, and plot...
highlight( gg, on = "plotly_hover", off = "plotly_deselect", color = "red" )
#create a SharedData object for use in the ggplot below, group by 'groups'
d <- highlight_key(mtcars, ~as.factor(cyl) )
#create a normal ggplot to fit your needs, but use the SharedData object as data for the chart
p <- ggplot(mtcars, aes(x = mpg, y = hp, col = as.factor(cyl))) + theme_bw() + geom_line()
#now ggplotly the newly created ggplot, and add text for the tooltips as needed
gg <- ggplotly( p, tooltip = "cyl" )
#set the highlight-options to your liking, and plot...
highlight( gg, on = "plotly_hover", off = "plotly_deselect", color = "red" )
#create a normal ggplot to fit your needs, but use the SharedData object as data for the chart
p <- ggplot(mtcars, aes(x = mpg, y = hp, col = vs)) + theme_bw() + geom_line()
#now ggplotly the newly created ggplot, and add text for the tooltips as needed
gg <- ggplotly( p, tooltip = "cyl" )
#set the highlight-options to your liking, and plot...
highlight( gg, on = "plotly_hover", off = "plotly_deselect", color = "red" )
mt <- mtcars
mt$cyl <- as.factor(cyl)
mt$cyl <- as.factor(cyl)
#create a SharedData object for use in the ggplot below, group by 'groups'
d <- highlight_key(mt, ~cyl)
#create a normal ggplot to fit your needs, but use the SharedData object as data for the chart
p <- ggplot(mt, aes(x = mpg, y = hp, group = cyl)) + theme_bw() + geom_line()
#now ggplotly the newly created ggplot, and add text for the tooltips as needed
gg <- ggplotly( p, tooltip = "cyl" )
#set the highlight-options to your liking, and plot...
highlight( gg, on = "plotly_hover", off = "plotly_deselect", color = "red" )
#create a normal ggplot to fit your needs, but use the SharedData object as data for the chart
p <- ggplot(mt, aes(x = mpg, y = hp, group = cyl, col = cyl)) + theme_bw() + geom_line()
#now ggplotly the newly created ggplot, and add text for the tooltips as needed
gg <- ggplotly( p, tooltip = "cyl" )
#set the highlight-options to your liking, and plot...
highlight( gg, on = "plotly_hover", off = "plotly_deselect", color = "red" )
mt
str(mt)
mt$cyl <- as.factor(cyl)
mt$cyl <- as.factor(mt$cyl)
#create a SharedData object for use in the ggplot below, group by 'groups'
d <- highlight_key(mt, ~cyl)
#create a normal ggplot to fit your needs, but use the SharedData object as data for the chart
#now ggplotly the newly created ggplot, and add text for the tooltips as needed
gg <- ggplotly( p, tooltip = "cyl" )
#set the highlight-options to your liking, and plot...
highlight( gg, on = "plotly_hover", off = "plotly_deselect", color = "red" )
str(mt)
mt <- mtcars
mt$cyl <- as.factor(mt$cyl)
#create a SharedData object for use in the ggplot below, group by 'groups'
d <- highlight_key(mt, ~cyl)
#create a normal ggplot to fit your needs, but use the SharedData object as data for the chart
#now ggplotly the newly created ggplot, and add text for the tooltips as needed
gg <- ggplotly( p, tooltip = "cyl" )
#set the highlight-options to your liking, and plot...
highlight( gg, on = "plotly_hover", off = "plotly_deselect", color = "red" )
#create a normal ggplot to fit your needs, but use the SharedData object as data for the chart
p <- ggplot(mt, aes(x = mpg, y = hp, group = cyl) + theme_bw() + geom_line()
#now ggplotly the newly created ggplot, and add text for the tooltips as needed
gg <- ggplotly( p, tooltip = "cyl" )
#set the highlight-options to your liking, and plot...
highlight( gg, on = "plotly_hover", off = "plotly_deselect", color = "red" )
#now ggplotly the newly created ggplot, and add text for the tooltips as needed
gg <- ggplotly( p )
#set the highlight-options to your liking, and plot...
highlight( gg, on = "plotly_hover", off = "plotly_deselect", color = "red" )
mt <- mtcars
mt$cyl <- as.factor(mt$cyl)
#create a SharedData object for use in the ggplot below, group by 'groups'
d <- highlight_key(mt, ~cyl)
#create a normal ggplot to fit your needs, but use the SharedData object as data for the chart
#now ggplotly the newly created ggplot, and add text for the tooltips as needed
gg <- ggplotly( p )
#set the highlight-options to your liking, and plot...
highlight( gg, on = "plotly_hover", off = "plotly_deselect", color = "red" )
str(mt)
mt <- mtcars
mt$cyl <- as.factor(mt$cyl)
#create a normal ggplot to fit your needs, but use the SharedData object as data for the chart
p <- ggplot(mt, aes(x = mpg, y = hp, group = cyl) + theme_bw() + geom_line()
#now ggplotly the newly created ggplot, and add text for the tooltips as needed
gg <- ggplotly( p )
#set the highlight-options to your liking, and plot...
highlight( gg, on = "plotly_hover", off = "plotly_deselect", color = "red" )
#now ggplotly the newly created ggplot, and add text for the tooltips as needed
gg <- ggplotly(p, tooltip = "cyl")
#set the highlight-options to your liking, and plot...
highlight( gg, on = "plotly_hover", off = "plotly_deselect", color = "red" )
library(plotly)
runApp()
runApp()
df_all
df_all <- df$spectrum %>%
as.data.frame() %>%
mutate(freq = as.numeric(row.names(.))) %>%
dplyr::filter(freq > freq_low, freq < freq_high) %>%
tidyr::pivot_longer(., cols = -freq) %>%
mutate(Electrode = name,
power = value,
select_flg = ifelse(Electrode == elec, "selected", "not_selected"))
df_all
df_all <- df$spectrum %>%
as.data.frame() %>%
mutate(freq = as.numeric(row.names(.))) %>%
dplyr::filter(freq > freq_low, freq < freq_high) %>%
tidyr::pivot_longer(., cols = -freq) %>%
mutate(Electrode = name,
power = value,
select_flg = ifelse(Electrode == elec, "selected", "not_selected"))
df_avg <- df$spectrum %>%
as.data.frame() %>%
mutate(freq = as.numeric(row.names(.))) %>%
mutate(Avg = rowMeans(.[-ncol(.)]),
Electrode = "Avg") %>%
filter(freq > freq_low, freq < freq_high) %>%
select(freq, Avg, Electrode)
if (log_freq) {
df_all$freq <- log(df_all$freq)
df_avg$freq <- log(df_avg$freq)
}
function(df, freq_low, freq_high, log_freq, log_power, all_elec, elec){
df_all <- df$spectrum %>%
as.data.frame() %>%
mutate(freq = as.numeric(row.names(.))) %>%
dplyr::filter(freq > freq_low, freq < freq_high) %>%
tidyr::pivot_longer(., cols = -freq) %>%
mutate(Electrode = name,
power = value)
browser()
df_avg <- df$spectrum %>%
as.data.frame() %>%
mutate(freq = as.numeric(row.names(.))) %>%
mutate(Avg = rowMeans(.[-ncol(.)]),
Electrode = "Avg") %>%
filter(freq > freq_low, freq < freq_high) %>%
select(freq, Avg, Electrode)
if (log_freq) {
df_all$freq <- log(df_all$freq)
df_avg$freq <- log(df_avg$freq)
}
if (log_power) {
df_all$power <- log(df_all$power)
df_avg$Avg <- log(df_avg$Avg)
}
p <- ggplot() +
geom_line(data = df_avg, mapping = aes(x = freq, y = Avg, group = Electrode), col = "black", size = 1.2) +
geom_line(data = df_all, mapping = aes(x = freq, y = power, group = Electrode), col = "gray", alpha = .7) +
xlab("Frequency") +
ylab("Power") +
ggtitle("Average of Electrodes") +
theme_classic()
gg <- ggplotly(p, tooltip = "Electrode")
highlight(gg, on = "plotly_hover", off = "plotly_deselect", color = "red")
}
p <- ggplot() +
geom_line(data = df_avg, mapping = aes(x = freq, y = Avg, group = Electrode), col = "black", size = 1.2) +
geom_line(data = df_all, mapping = aes(x = freq, y = power, group = Electrode), col = "gray", alpha = .7) +
xlab("Frequency") +
ylab("Power") +
ggtitle("Average of Electrodes") +
theme_classic()
p <- ggplot() +
geom_line(data = df_avg, mapping = aes(x = freq, y = Avg, group = Electrode), col = "black", size = 1.2) +
geom_line(data = subset(df_all, select_flg == "not_selected"), mapping = aes(x = freq, y = power, group = Electrode), col = "gray", alpha = .7) +
geom_line(data = subset(df_all, select_flg == "selected"), mapping = aes(x = freq, y = power, group = Electrode), col = "red", alpha = .7) +
xlab("Frequency") +
ylab("Power") +
ggtitle("Average of Electrodes") +
theme_classic()
gg <- ggplotly(p, tooltip = "Electrode")
highlight(gg, on = "plotly_hover", off = "plotly_deselect")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste("hello", c(1, 2))
cat("hello", c(1, 2))
cat("hello", NULL)
paste("hello", NULL)
runApp()
runApp()
runApp()
runApp()
IDs
input$alpha
View(df)
runApp()
runApp()
no_alpha$EC$`32`$F3
setdiff(1:15, 5:30)
runApp()
runApp()
runApp()
runApp()
runApp()
renv::snapshot()
